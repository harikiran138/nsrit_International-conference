__webpack_require__.r(__webpack_exports__);
/* harmony export */
__webpack_require__.d(__webpack_exports__, {
    /* harmony export */
    "default": () => (__WEBPACK_DEFAULT_EXPORT__)
    /* harmony export */
});
/* harmony import */
var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__( /*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */
var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__( /*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js");





const $internals = Symbol('internals');
const $defaults = Symbol('defaults');

function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
    if (value === false || value == null) {
        return value;
    }

    return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;

    while ((match = tokensRE.exec(str))) {
        tokens[match[1]] = match[2];
    }

    return tokens;
}

function matchHeaderValue(context, value, header, filter) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)) {
        return filter.call(this, value, header);
    }

    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)) return;

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)) {
        return value.indexOf(filter) !== -1;
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)) {
        return filter.test(value);
    }
}

function formatHeader(header) {
    return header.trim()
        .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
            return char.toUpperCase() + str;
        });
}

function buildAccessors(obj, header) {
    const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toCamelCase(' ' + header);

    ['get', 'set', 'has'].forEach(methodName => {
        Object.defineProperty(obj, methodName + accessorName, {
            value: function(arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
            },
            configurable: true
        });
    });
}

function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
            return _key;
        }
    }
    return null;
}

function AxiosHeaders(headers, defaults) {
    headers && this.set(headers);
    this[$defaults] = defaults || null;
}

Object.assign(AxiosHeaders.prototype, {
    set: function(header, valueOrRewrite, rewrite) {
        const self = this;

        function setHeader(_value, _header, _rewrite) {
            const lHeader = normalizeHeader(_header);

            if (!lHeader) {
                throw new Error('header name must be a non-empty string');
            }

            const key = findKey(self, lHeader);

            if (key && _rewrite !== true && (self[key] === false || _rewrite === false)) {
                return;
            }

            self[key || _header] = normalizeValue(_value);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(header)) {
            _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(header, (_value, _header) => {
                setHeader(_value, _header, valueOrRewrite);
            });
        } else {
            setHeader(valueOrRewrite, header, rewrite);
        }

        return this;
    },

    get: function(header, parser) {
        header = normalizeHeader(header);

        if (!header) return undefined;

        const key = findKey(this, header);

        if (key) {
            const value = this[key];

            if (!parser) {
                return value;
            }

            if (parser === true) {
                return parseTokens(value);
            }

            if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(parser)) {
                return parser.call(this, value, key);
            }

            if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(parser)) {
                return parser.exec(value);
            }

            throw new TypeError('parser must be boolean|regexp|function');
        }
    },

    has: function(header, matcher) {
        header = normalizeHeader(header);

        if (header) {
            const key = findKey(this, header);

            return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }

        return false;
    },

    delete: function(header, matcher) {
        const self = this;
        let deleted = false;

        function deleteHeader(_header) {
            _header = normalizeHeader(_header);

            if (_header) {
                const key = findKey(self, _header);

                if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
                    delete self[key];

                    deleted = true;
                }
            }
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)) {
            header.forEach(deleteHeader);
        } else {
            deleteHeader(header);
        }

        return deleted;
    },

    clear: function() {
        return Object.keys(this).forEach(this.delete.bind(this));
    },

    normalize: function(format) {
        const self = this;
        const headers = {};

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
            const key = findKey(headers, header);

            if (key) {
                self[key] = normalizeValue(value);
                delete self[header];
                return;
            }

            const normalized = format ? formatHeader(header) : String(header).trim();

            if (normalized !== header) {
                delete self[header];
            }

            self[normalized] = normalizeValue(value);

            headers[normalized] = true;
        });

        return this;
    },

    toJSON: function(asStrings) {
        const obj = Object.create(null);

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(Object.assign({}, this[$defaults] || null, this),
            (value, header) => {
                if (value == null || value === false) return;
                obj[header] = asStrings && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.join(', ') : value;
            });

        return obj;
    }
});

Object.assign(AxiosHeaders, {
    from: function(thing) {
        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(thing)) {
            return new this((0, _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(thing));
        }
        return thing instanceof this ? thing : new this(thing);
    },

    accessor: function(header) {
        const internals = this[$internals] = (this[$internals] = {
            accessors: {}
        });

        const accessors = internals.accessors;
        const prototype = this.prototype;

        function defineAccessor(_header) {
            const lHeader = normalizeHeader(_header);

            if (!accessors[lHeader]) {
                buildAccessors(prototype, _header);
                accessors[lHeader] = true;
            }
        }

        _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

        return this;
    }
});

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent']);

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders.prototype);
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders);

/* harmony default export */
const __WEBPACK_DEFAULT_EXPORT__ = (AxiosHeaders);


//# sourceURL=webpack://timetics/./node_modules/axios/lib/core/AxiosHeaders.js?